apply plugin: 'com.android.application'

android {

    compileSdkVersion 28

    sourceSets {
        
        main {
            java.srcDirs = ['src/']
            res.srcDirs = ['res/']
            assets.srcDir('assets/')
            manifest.srcFile 'AndroidManifest.xml'
        }
        
        androidTest {
            java.srcDirs = ['androidTest/']
        }
        
        test {
            java.srcDirs = ['junitTest/']
        }
    }

    defaultConfig {

        applicationId "com.crsardar.handson.android.custom_project_layout"
        minSdkVersion 25
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }

    buildTypes {

        // JaCoco 1 >>>
        debug {
            testCoverageEnabled true
        }
        // JaCoco 1 <<<

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

// JaCoco 2 >>>
apply plugin: 'jacoco'

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*']

    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)

    def mainSrc = "${project.projectDir}/src"

    //Explain to JaCoco where is our source code
    sourceDirectories = files([mainSrc])

    //Explain to JaCoco where are our .class file
    classDirectories = files([debugTree])

    //Accumulate all test reports
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/*.exec",                                    // Generated by JUnit tests 
            "outputs/code-coverage/connected/**/*coverage.ec"   // Generated by Android's instrumented tests
    ])
}
// JaCoco 2 <<<


